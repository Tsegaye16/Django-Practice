0 chaptertwo problemsolv ( goalbas ) agent compliedbi : dawith.wolkiteunivers collegeofinformaticsandcomput departmentofinformationsystemscompiledbydawith . 1tableofcont lesson2 : problemsolvingbysearch .................................................................................................. 2 lesson2:1 : problem-solvingag ..................................................................................................... 2 lesson2:3 : search ................................................................................................................................ 3 lesson2:3well-definedproblemsandsolut ................................................................................. 4 lesson2:4 : real-worldproblem ........................................................................................................ 7 lesson2:5 : searchingforsolut ..................................................................................................... 8 lesson2:6uninformedsearchstrategi .......................................................................................... 11 breadth-firstsearch .............................................................................................................. 11 uniform-costsearch ........................................................................................................... 12 depth-first-search ............................................................................................................... 13 depth-limited-search .......................................................................................................... 14 iterativedeepeningdepth-firstsearch ............................................................................... 15 bidirectionalsearch ............................................................................................................. 18 lesson2:7 : informedsearchandexplor ................................................................................... 19 best-firstsearch ................................................................................................................... 19 greedybest-firstsearch ....................................................................................................... 19 a * search ............................................................................................................................. 22 recursivebest-firstsearch ( rbf ) .................................................................................... 22 lesson2:8 : localsearchalgorithmsandoptimizationproblem ................................................... 29 hill-climbingsearch ............................................................................................................. 30 simulatedannealingsearch .................................................................................................. 31 geneticalgorithm ............................................................................................................... 32 lesson2:9 : adversarialsearch .......................................................................................................... 34 lesson2:10 : avoidingrepeatedst ............................................................................................. 41 lesson2:11 : constraintsatisfactionproblem ( csp ) ........................................................................ 43compiledbydawith . 2exampl : routefindingproblem referringtofigure3.3 onholidayinethiopia : currentlyinmekel . flightleavestomorrowfromaddisababa formulatego : beinaddisababa formulateproblem : state : variousc action : drivebetweenc findsolut : sequenceofc , e.g. , mekel , weldiya , semera , addisababachapter2 problemsolv ( goalbas ) agent lesson2 : problemsolvingbysearch animportantaspectofintelligenceisgoal-basedproblemsolving.thesolutionofmani problemscanbedescribedbyfindingasequenceofactionsthatleadtoadesirablegoal.each actionchangesthestateandtheaimistofindthesequenceofactionsandstatesthatleadfromth initi ( start ) statetoafin ( goal ) state . awell-definedproblemcanbedescribedbi : initialst operatororsuccessorfunction-foranystatexreturnss ( x ) , thesetofstatesreach fromxwithoneact statespace-allstatesreachablefrominitialbyanysequenceofact path-sequencethroughstatespac pathcost-functionthatassignsacosttoapath.costofapathisthesumofcostsof individualactionsalongthepath goaltest-testtodetermineifatgoalst whatissearch ? searchisthesystematicexaminationofstatestofindpathfromthestart/rootstatetothego state.thesetofpossiblest , togetherwithoperatorsdefiningtheirconnectivityconstituteth searchspace.theoutputofasearchalgorithmisasolut , thati , apathfromtheinitialstatetoa statethatsatisfiesthegoaltest . lesson2:1 : problem-solvingag aproblem-solvingagentisagoal-basedagent.itdecideswhattodobyfindingsequenceof actionsthatleadtodesirablestates.theagentcanadoptagoalandaimatsatisfyingit.toillustr theagent ’ sbehavior , letustakeanexamplewhereouragentisinthecityofabinet , whichisin addisababa.theagenthastoadoptagoalofgettingtopiassa.goalformul , basedonth currentsituationandtheag ’ sperformancemeasur , isthefirststepinproblemsolving.th agent ’ staskistofindoutwhichsequenceofactionswillgettoagoalstate.problemformul istheprocessofdecidingwhatactionsandstatestoconsidergivenagoal.compiledbydawith . 3 problemformul aproblemisdefinedbyfouritem : initialstatee.g. , “ atmekel '' successorfunct ( x ) =setofaction-statepair e.g. , ( mekel ) = { [ mekele- > axum ; axum ] , … . } goaltest , canb explicit , e.g. , x=ataddisababa '' implicit , e.g. , nodirt ( x ) pathcost ( addit ) e.g. , sumofdist , numberofactionsexecut , etc . c ( x ; ; ) isthestepcost , assumedtob > =0 asolutionisasequenceofactionsleadingfromtheinitialstatetoagoalst . figure3.1goalformulationandproblemformul lesson2:3 : search anagentwithseveralimmediateoptionsofunknownvaluecandecidewhattodobyexamin differentpossiblesequencesofactionsthatleadstothestatesofknownvalu , andthenchoosingth bestsequence.theprocessoflookingforsequencesactionsfromthecurrentstatetoreachthego stateiscalledsearch.thesearchalgorithmtakesaproblemasinputandreturnsasolutioninth formofactionsequence.onceasolutionisfound , theexecutionphaseconsistsofcarryingoutth recommendedaction.figure3.2showsasimpl “ formul , search , execut ” designfortheag . oncesolutionhasbeenexecut , theagentwillformulateanewgo . functionsimple-problem-solving-ag ( percept ) returnsanact input : percept , apercept static : seq , anactionsequ , initiallyempti state , somedescriptionofthecurrentworldst goal , agoal , initiallynul problem , aproblemformul stateupdate-st ( state , percept ) ifseqisemptythendo goalformulate-go ( state ) problemformulate-problem ( state , goal ) seqsearch ( problem ) actionfirst ( seq ) ; seqrest ( seq ) returnact figure3.2asimpleproblem-solvingagent.itfirstformulatesagoalandaproblem , search forasequenceofactionsthatwouldsolveaproblem , andexecutestheactionsoneatatim . theagentdesignassumestheenvironmenti •static : theentireprocesscarriedoutwithoutpayingattentiontochangesthatmight beoccurringintheenviron . •observ : theinitialstateisknownandtheag ’ ssensordetectsallaspectsthat arerelevanttothechoiceofact •discret : withrespecttothestateoftheenvironmentandperceptsandactionsso thatalternatecoursesofactioncanbetakencompiledbydawith . 4•determinist : thenextstateoftheenvironmentiscompletelydeterminedbyth currentstateandtheactionsexecutedbytheagent.solutionstotheproblemar singlesequenceofact anagentcarriesoutitsplanwitheyeclosed.thisiscalledanopenloopsystembecauseignor theperceptsbreakstheloopbetweentheagentandtheenviron . lesson2:3well-definedproblemsandsolut aproblemcanbeformallydefinedbyfourcompon : theinitialstatethattheagentstartsin.theinitialstateforouragentofexampleproblemi describedbyin ( mekel ) asuccessorfunctionreturnsthepossibleactionsavailabletotheagent.givenastatex , successor-fn ( x ) returnsasetof { action , successor } orderedpairswhereeachactioni oneofthelegalactionsinstatex , andeachsuccessorisastatethatcanbereachedfromxbi applyingtheact . forexampl , fromthestatein ( mekel ) , thesuccessorfunctionfortheethiopiaproblemwould return { [ go ( weldiya ) , ( weldiya ) ] , [ go ( adigrat ) , ( adigrat ) ] , [ go ( axum ) , ( axum ) ] } statespac : thesetofallstatesreachablefromtheinitialstate.thestatespaceformsa graphinwhichthenodesarestatesandthearcsbetweennodesareact . apathinthestatespaceisasequenceofstatesconnectedbyasequenceofact . thegoaltestdetermineswhetherthegivenstateisagoalst . apathcostfunctionassignsnumericcosttoeachaction.fortheethiopiaproblemthecost ofpathmightbeitslengthinkilomet . thestepcostoftakingactionatogofromstatextostateyisdenotedbyc ( x , , ) .the stepcostforethiopiaareshowninfigure1.18.itisassumedthatthestepcostsarenon- neg . asolutiontotheproblemisapathfromtheinitialstatetoagoalst . anoptimalsolutionhasthelowestpathcostamongallsolut . figure3.3asimplifiedroadmapofpartofethiopiacompiledbydawith . 5exampleproblem theproblem-solvingapproachhasbeenappliedtoavastarrayoftaskenvironments.somebest- knownproblemsaresummarizedbelow.theyaredistinguishedastoyorreal-worldproblems.a toyproblemisintendedtoillustratevariousproblem-solvingmethods.itcanbeeasilyusedbi differentresearcherstocomparetheperformanceofalgorithms.areal-worldproblemison whosesolutionspeopleactuallycareabout . toyproblem vacuumworldexampl ostat : theagentisinoneoftwolocations. , eachofwhichmightormightnotcontaindirt . thu , thereare2x22=8possibleworldst . oinitialst : anystatecanbedesignatedasinitialst . osuccessorfunct : thisgeneratesthelegalstatesthatresultsfromtryingthethreeact ( left , right , suck ) .thecompletestatespaceisshowninfigure2.3 ogoaltest : thistestwhetherallthesquaresareclean . opathtest : eachstepcostson , sothatthepathcostisthenumberofstepsinthepath . vacuumworldstatespac figure3.4thestatespaceforthevacuumworld.arcsdenoteact : l=left , r=right , s=suck the8-puzzl an8-puzzleconsistsofa3x3boardwitheightnumberedtilesandablankspace.atileadjacentto thebalankspacecanslideintothespace.theobjectistoreachthegoalst , asshowninfigure3.5 exampl : the8-puzzl figure3.5atypicalinstanceof8-puzzl . theproblemformulationisasfollow : ostat : astatedescriptionspecifiesthelocationofeachoftheeighttilesandtheblankin oneoftheninesquares.compiledbydawith . 6oinitialst : anystatecanbedesignatedastheinitialstate.itcanbenotedthatanygiven goalcanbereachedfromexactlyhalfofthepossibleinitialst . osuccessorfunct : thisgeneratesthelegalstatesthatresultfromtryingthefouract ( blankmovesleft , right , upordown ) . ogoaltest : thischeckwhetherthestatematchesthegoalconfigurationshowninfigure3.5 . ( othergoalconfigurationsareposs ) opathcost : eachstepcosts1 , sothepathcostisthenumberofstepsinthepath . the8-puzzlebelongstothefamilyofsliding-blockpuzzl , whichareoftenusedastestproblem fornewsearchalgorithmsinai.thisgeneralclassisknownasnp-complete.the8-puzzleha 9 ! /2=181,440reachablestatesandiseasilysolved.the15puzzl ( 4x4board ) hasaround1.3 trillionst , andtherandominstancescanbesolvedoptimallyinfewmillisecondsbythebest searchalgorithms.the24-puzzl ( ona5x5board ) hasaround1025st , andrandominst arestillquitedifficulttosolveoptimallywithcurrentmachinesandalgorithm . 8-queen ’ sproblem thegoalof8-queen ’ sproblemistoplace8queensonthechessboardsuchthatnoqueenattack anyoth . ( aqueenattacksanypieceinthesamerow , columnordiagon ) .figure3.6showsan attemptedsolutionthatfail : thequeenintherightmostcolumnisattackedbythequeenatthetop left.anincrementalformulationinvolvesoperatorsthataugmentsthestatedescript , start withanemptystate.for8-queen ’ sproblem , thismeanseachactionaddsaqueentothestate.a complete-stateformulationstartswithall8queensontheboardandmovethemaround.ineith casethepathcostisofnointerestbecauseonlythefinalstatecount . figure3.68-queensproblem thefirstincrementalformulationonemighttryisthefollow : ostat : anyarrangementof0to8queensonboardisast . oinitialst : noqueenontheboard . osuccessorfunct : addaqueentoanyemptysquar . ogoaltest:8queensareontheboard , noneattack . inthisformul , wehave64.63…57=3x1014possiblesequencestoinvestigate.abett formulationwouldprohibitplacingaqueeninanysquarethatisalreadyattack . : ostat : arrangementsofnqueen ( 0 < =n < =8 ) onepercolumnintheleftmostcolumn , withnoqueenattackinganotherarest . osuccessorfunct : addaqueentoanysquareintheleftmostemptycolumnsuchthat notattackedbyanyotherqueen . thisformulationreducesthe8-queenstatespacefrom3x1014tojust2057 , andsolutionsareeasi tofind.forthe100queenstheinitialformulationhasroughly10400stateswhereastheimprov formulationhasabout1052states.thisisahugereduct , buttheimprovedstatespaceisstilltoo bigforthealgorithmstohandle.compiledbydawith . 7lesson2:4 : real-worldproblem route-findingproblem route-findingproblemisdefinedintermsofspecifiedlocationsandtransitionsalonglinksbetween them.route-findingalgorithmsareusedinavarietyofappl , suchasroutingincomput network , militaryoperationsplan , andairlinetravelplanningsystem . airlinetravelproblem theairlinetravelproblemisspecifyingasfollow : ostat : eachisrepresentedbyaloc ( e.g. , anairport ) andthecurrenttim . oinitialst : thisisspecifiedbytheproblem . osuccessorfunct : thisreturnsthestatesresultingfromtakinganyscheduledflight ( furtherspecifiedbyseatclassandloc ) , leavinglaterthanthecurrenttimeplusth within-airporttransittim , fromthecurrentairporttoanoth . ogoaltest : areweatthedestinationbysomeprespecifiedtim ? opathcost : thisdependsuponthemonetarycost , waitingtim , flighttim , customsand immigrationprocedur , seatqual , timeofd , typeofairplan , frequent-fly mileageaward , andsoon . touringproblem touringproblemsarecloselyrelatedtoroute-findingproblem , butwithanimportantdiffer . considerforexampl , theproblem , ” visiteverycityatleastonc ” asshowninethiopiamap.a withroute-findingtheactionscorrespondtotripsbetweenadjacentcities.thestatespac , howev , isquitedifferent.theinitialstatewouldb “ inaddisababa ; visit { addisababa } ” .atyp intermediatestatewouldb “ invaslui ; visit { addisababa , urziceni , vaslui } ” .thegoaltest wouldcheckwhethertheagentisinaddisababaandall20citieshavebeenvisit . thetravellingsalespersonproblem ( tsp ) isatouringprobleminwhicheachcitymustbevisitedexactlyonc ? theaimistofindtheshortest tour.theproblemisknowntobenp-hard.enormouseffortshavebeenexpendedtoimproveth capabilitiesoftspalgorithms.thesealgorithmsarealsousedintaskssuchasplanningmov ofautomaticcircuit-boarddrillsandofstockingmachinesonshopfloor . vlsilayout avlsilayoutproblemrequirespositioningmillionsofcomponentsandconnectionsonachipto minimizearea , minimizecircuitdelay , minimizestraycapacit , andmaximizemanufactur yield.thelayoutproblemissplitintotwopart : celllayoutandchannelrout . robotnavig robotnavigationisageneralizationoftheroute-findingproblem.ratherthanadiscretesetof rout , arobotcanmoveinacontinuousspacewithaninfinitesetofpossibleactionsandstates.for acircularrobotmovingonaflatsurfac , thespaceisessentiallytwo-dimensional.whentherobot hasarmsandlegsorwheelsthatalsomustbecontrol , thesearchspacebecomesmulti- dimensional.advancedtechniquesarerequiredtomakethesearchspacefinit . automaticassemblysequenc theexampleincludesassemblyofintricateobjectssuchaselectricmotors.theaiminassembl problemsistofindtheorderinwhichtoassemblethepartsofsomeobjects.ifthewrongorderi chosen , therewillbenowaytoaddsomepartlaterwithoutundoingsomeworkalreadydon . anotherimportantassemblyproblemisproteindesign , inwhichthegoalistofindasequenceof aminoacidsthatwillbefoldintoathree-dimensionalproteinwiththerightpropertiestocuresom disease.compiledbydawith . 8internetsearch inrecentyearstherehasbeenincreaseddemandforsoftwarerobotsthatperforminternet searching. , lookingforanswerstoquest , forrelatedinform , orforshoppingdeals.th searchingtechniquesconsiderinternetasagraphofnod ( page ) connectedbylink . lesson2:5 : searchingforsolut searchtre havingformulatedsomeproblem , wenowneedtosolvethem.thisisdonebyasearchthrough thestatespace.asearchtreeisgeneratedbytheinitialstateandthesuccessorfunctionthat togetherdefinethestatespace.ingener , wemayhaveasearchgraphratherthanasearchtre , whenthesamestatecanbereachedfrommultiplepaths.figure1.23showssomeoftheexpans inthesearchtreeforfindingaroutefrommekeletoaddisababa . figure1.23partialsearchtreesforfindingaroutefrommekeletoaddisababa.nodesthat havebeenexpandedareshad . ; nodesthathavebeengeneratedbutnotyetexpandedar outlinedinbold ; nodesthathavenotyetbeengeneratedareshowninfaintdashedlin therootofthesearchtreeisasearchnodecorrespondingtotheinitialst , ( mekel ) .the firststepistotestwhetherthisisagoalstate.thecurrentstateisexpandedbyapplyingth successorfunctiontothecurrentst , therebygeneratinganewsetofstates.inthiscas , weget threenewst : ( weldiya ) , ( adigrat ) , andin ( axum ) .nowwemustchoosewhichofthes threepossibilitiestoconsiderfurther.thisistheessenceofsearch-followinguponeoptionnow andputtingtheothersasideforlatt , incasethefirstchoicedoesnotleadtoasolut . searchstrategy.thegeneraltree-searchalgorithmisdescribedinformallyinfigure1.24 . treesearch figure1.24aninformaldescriptionofthegeneraltree-searchalgorithmcompiledbydawith . 9thechoiceofwhichstatetoexpandisdeterminedbythesearchstrategy.thereareaninfinit numberpathsinthisstatespac , sothesearchtreehasaninfinitenumberofnod . anodeisadatastructurewithfivecompon : ostat : astateinthestatespacetowhichthenodecorrespond ; oparent-nod : thenodeinthesearchtreethatgeneratedthisnod ; oaction : theactionthatwasappliedtotheparenttogeneratethenod ; opath-cost : thecost , denotedbyg ( n ) , ofthepathfrominitialstatetothenod , indicatedbytheparentpoint ; odepth : thenumberofstepsalongthepathfromtheinitialst . itisimportanttorememberthedistinctionbetweennodesandstates.anodeisabookkeep datastructureusedtorepresentthesearchtree.astatecorrespondstoconfigurationoftheworld . figure1.25nodesaredatastructuresfromwhichthesearchtreei constructed.eachhasapar , astat , arrowspointfromchildtopar . fring fringeisacollectionofnodesthathavebeengeneratedbutnotyetbeenexpanded.eachelementof thefringeisaleafnod , thati , anodewithnosuccessorsinthetree.thefringeofeachtre consistsofthosenodeswithboldoutlines.thecollectionofthesenodesisimplementedasaqueu . thegeneraltreesearchalgorithmisshowninfigure2.9compiledbydawith . 10 figure1.26thegeneraltreesearchalgorithm theoperationsspecifiedinfigure1.26onaqueueareasfollow : omake-queu ( element… ) createsaqueuewiththegivenel ( ) . oempti ? ( queue ) returnstrueonlyiftherearenomoreelementsinthequeu . ofirst ( queue ) returnsfirst ( queue ) andremovesitfromthequeu . oinsert ( element , queue ) insertsanelementintothequeueandreturnstheresult queue . oinsert-al ( element , queue ) insertsasetofelementsintothequeueandreturnsth resultingqueu . measuringproblem-solvingperform theoutputofproblem-solvingalgorithmiseitherfailureorasolut . ( somealgorithmsmight stackinaninfiniteloopandneverreturnanoutput ) .thealgorithm ’ sperformancecanb measuredinfourway : ocomplet : isthealgorithmguaranteedtofindasolutionwhenthereison ? ooptim : doesthestrategyfindtheoptimalsolut otimecomplex : howlongdoesittaketofindasolut ? ospacecomplex : howmuchmemoryisneededtoperformthesearch ? compiledbydawith . 11lesson2:6uninformedsearchstrategi uninformedsearchstrategieshavenoadditionalinformationaboutstatesbeyondthatprovidedin theproblemdefinition.strategiesthatknowwhetheronenon-goalstatei “ morepromis ” anotherarecalledinformedsearchorheuristicsearchstrategi . therearefiveuninformedsearchstrategiesasgivenbelow . obreadth-firstsearch ouniform-costsearch odepth-firstsearch odepth-limitedsearch oiterativedeepeningsearch breadth-firstsearch breadth-firstsearchisasimplestrategyinwhichtherootnodeisexpandedfirst , thenal successorsoftherootnodeareexpandednext , thentheirsuccessor , andsoon.ingener , allth nodesareexpandedatagivendepthinthesearchtreebeforeanynodesatthenextlevelar expand . breath-first-searchisimplementedbycallingtree-searchwithanemptyfringethatisa first-in-first-out ( fifo ) queue , assuringthatthenodesthatarevisitedfirstwillbeexpandedfirst . inotherword , callingtree-search ( problem , fifo-queu ( ) ) resultsinbreadth-first- search.thefifoqueueputsallnewlygeneratedsuccessorsattheendofthequeu , meansthatshallownodesareexpandedbeforedeepernod . figure1.27breadth-firstsearchonasimplebinarytree.ateachstag , thenodetobeexpandednext isindicatedbyamark . propertiesofbreadth-first-search figure1.28breadth-first-searchpropertiescompiledbydawith . 12 figure1.29timeandmemoryrequirementsforbreadth-first-search . thenumbersshownassumebranchfactorofb=10 ; 10,000 nodes/second ; 1000bytes/nod timecomplexityforbf assumeeverystatehasbsuccessors.therootofthesearchtreegeneratesbnodesatthefirst level , eachofwhichgeneratesbmorenod , foratotalofb2atthesecondlevel.eachofthes generatesbmorenod , yieldingb3nodesatthethirdlevel , andsoon.nowsuppos , thatth solutionisatdepthd.intheworstcas , wewouldexpandallbutthelastnodeatleveld , generatingbd+1–bnodesatleveld+1.thenthetotalnumberofnodesgeneratedisb+b2+b3+ …+bd+ ( bd+1+b ) =o ( bd+1 ) .everynodethatisgeneratedmustremaininmemori , becaus eitherpartofthefringeorisanancestorofafringenode.thespacecomplexityi , therefor , sameasthetimecomplex . uniform-costsearch insteadofexpandingtheshallowestnod , uniform-costsearchexpandsthenodenwithth lowestpathcost.uniform-costsearchdoesnotcareaboutthenumberofstepsapathha , onlyabouttheirtotalcost . compiledbydawith . 13 figure1.30propertiesofuniform-cost-search depth-first-search depth-first-searchalwaysexpandsthedeepestnodeinthecurrentfringeofthesearchtree.th progressofthesearchisillustratedinfigure1.31.thesearchproceedsimmediatelytothedeepest levelofthesearchtre , wherethenodeshavenosuccessors.asthosenodesareexpand , theyar droppedfromthefring , sothenthesearch “ backsup ” tothenextshallowestnodethatstillha unexploredsuccessor . figure1.31depth-first-searchonabinarytree.nodesthathavebeenexpandedandhaveno descendantsinthefringecanberemovedfromthememori ; theseareshowninblack.nodesat depth3areassumedtohavenosuccessorsandmistheonlygoalnode.compiledbydawith . 14thisstrategycanbeimplementedbytree-searchwithalast-in-first-out ( lifo ) queue , also knownasastack.depth-first-searchhasverymodestmemoryrequirements.itneedstostoreonlya singlepathfromtheroottoaleafnod , alongwiththeremainingunexpandedsiblingnodesfor eachnodeonthepath.oncethenodehasbeenexpand , itcanberemovedfromthememori , soonasitsdescendantshavebeenfullyexplor ( referfigure2.12 ) .forastatespacewitha branchingfactorbandmaximumdepthm , depth-first-searchrequiresstorageofonlybm+1nod . usingthesameassumptionsasfigure2.11 , andassumingthatnodesatthesamedepthasthego nodehavenosuccessor , wefindthedepth-first-searchwouldrequire118kilobytesinsteadof10 petabyt , afactorof10billiontimeslessspac . drawbackofdepth-first-search thedrawbackofdepth-first-searchisthatitcanmakeawrongchoiceandgetstuckgoingdown verylong ( oreveninfinit ) pathwhenadifferentchoicewouldleadtosolutionneartherootofth searchtree.forexampl , depth-first-searchwillexploretheentireleftsubtreeevenifnodecisa goalnod . backtrackingsearch avariantofdepth-firstsearchcalledbacktrackingsearchuseslessmemoryandonlyonesuccessor isgeneratedatatimeratherthanallsuccessor . ; onlyo ( ) memoryisneededratherthano ( bm ) depth-limited-search theproblemofunboundedtreescanbealleviatedbysupplyingdepth-first-searchwithapre- determineddepthlimitl.thati , nodesatdepthlaretreatedasiftheyhavenosuccessors.thi approachiscalleddepth-limited-search.thedepthlimitsolvestheinfinitepathproblem . depthlimitedsearchwillbenonoptimalifwechoosel > d.itstimecomplexityiso ( bl ) andit spacecomplexityiso ( bl ) .depth-first-searchcanbeviewedasaspecialcaseofdepth-limit searchwithl=oo sometim , depthlimitscanbebasedonknowledgeoftheproblem.for , exampl , onthemapof ethiopiatherearemorethan100cities.therefor , weknowthatifthereisasolution. , itmustbeof length19atthelongest , sol=10isapossiblechoice.howev , itoocanbeshownthatanyc canbereachedfromanyothercityinatmost9steps.thisnumberknownasthediameterofth statespac , givesusabetterdepthlimit.depth-limited-searchcanbeimplementedasasimpl modificationtothegeneraltree-searchalgorithmortotherecursivedepth-first-searchalgorithm . thepseudocodeforrecursivedepth-limited-searchisshowninfigure1.32.itcanbenotedthatth abovealgorithmcanterminatewithtwokindsoffailur : thestandardfailurevalueindicatesno solut ; thecutoffvalueindicatesnosolutionwithinthedepthlimit.depth-limitedsearch=depth- firstsearchwithdepthlimitl , returnscutoffifanypathiscutoffbydepthlimitcompiledbydawith . 15 functiondepth-limited-search ( problem , limit ) returnsasolution/fail/cutoff returnrecursive-dl ( make-nod ( initial-st [ problem ] ) , problem , limit ) functionrecursive-dl ( node , problem , limit ) returnssolution/fail/cutoff cutoff-occur ? fals ifgoal-test ( problem , state [ node ] ) thenreturnsolut ( node ) elseifdepth [ node ] =limitthenreturncutoff elseforeachsuccessorinexpand ( node , problem ) resultrecursive-dl ( successor , problem , limit ) ifresult=cutoffthencutoff_occur ? true elseifresultnot=failurethenreturnresult ifcutoff_occur ? thenreturncutoffelsereturnfailur figure1.32recursiveimplementationofdepth-limited-search : iterativedeepeningdepth-firstsearch iterativedeepeningsearch ( oriterative-deepening-depth-first-search ) isageneralstrategyoften usedincombinationwithdepth-first-search , thatfindsthebetterdepthlimit.itdoesthisbi graduallyincreasingthelimit–first0 , then1 , then2 , andsoon–untilagoalisfound.thiswil occurwhenthedepthlimitreachesd , thedepthoftheshallowestgoalnode.thealgorithmisshown infigure2.14.iterativedeepeningcombinesthebenefitsofdepth-firstandbreadth-first-search likedepth-first-search , itsmemoryrequirementsaremodest ; ( bd ) tobeprecise.likebreadth- first-search , itiscompletewhenthebranchingfactorisfiniteandoptimalwhenthepathcostisa non-decreasingfunctionofthedepthofthenode.figure2.15showsthefouriterationsof iterative-deepening_searchonabinarysearchtre , wherethesolutionisfoundonth fourthiter . figure1.33theiterativedeepeningsearchalgorithm , whichrepeatedlyappliesdepth-limited- searchwithincreasinglimits.itterminateswhenasolutionisfoundorifthedepthlimitedsearch returnsfailur , meaningthatnosolutionexists.compiledbydawith . 16 figure1.34fouriterationsofiterativedeepeningsearchonabinarytreecompiledbydawith . 17 iterativesearchisnotaswastefulasitmightseem iterativedeepeningsearch ss limit=0a limit=1 ss da limit=2bda e figure1.35 iterativesearchisnotaswastefulasitmightseem propertiesofiterativedeepeningsearch figure1.36 ingener , iterativedeepeningisthepreferreduninformedsearchmethodwhenthereisalarg searchspaceandthedepthofsolutionisnotknown.compiledbydawith . 18bidirectionalsearch theideabehindbidirectionalsearchistoruntwosimultaneoussearches–oneforwardfromth initialstateandtheotherbackwardfromthego , stoppingwhenthetwosearchesmeetinth middl ( figure1.37 ) .themotivationisthatbd/2+bd/2muchlessthan , orinthefigur , theareaof thetwosmallcirclesislessthantheareaofonebigcirclecenteredonthestartandreachingtoth goal . figure1.37aschematicviewofabidirectionalsearchthatisabouttosucce , whena branchfromthestartnodemeetsabranchfromthegoalnod . comparinguninformedsearchstrategi figure1.38comparessearchstrategiesintermsofthefourevaluationcriteria . figure1.38evaluationofsearchstrategi , bisthebranchingfactor ; disthedepthofth shallowestsolut ; misthemaximumdepthofthesearchtre ; listhedepthlimit.superscript caveatsareasfollow : acompleteifbisfinit ; bcompleteifstepcost > =eforpositive ; c optimalifstepcostsareallident ; difbothdirectionsusebreadth-firstsearch.compiledbydawith . 19lesson2:7 : informedsearchandexplor inform ( heurist ) searchstrategi : informedsearchstrategyisonethatusesproblem- specificknowledgebeyondthedefinitionoftheproblemitself.itcanfindsolutionsmoreeffici thanuninformedstrategi . best-firstsearch best-firstsearchisaninstanceofgeneraltree-searchorgraph-searchalgorithmin whichanodeisselectedforexpansionbasedonanevaluationfunctionf ( n ) .thenodewithlowest evaluationisselectedforexpans , becausetheevaluationmeasuresthedistancetothegoal.thi canbeimplementedusingapriority-queu , adatastructurethatwillmaintainthefringein ascendingorderoff-valu . heuristicfunct aheuristicfunctionorsimplyaheuristicisafunctionthatranksalternativesinvari searchalgorithmsateachbranchingstepbasingonanavailableinformationinordertomakea decisionwhichbranchistobefollowedduringasearch . thekeycomponentofbest-firstsearchalgorithmisaheuristicfunct , denotedbyh ( n ) : h ( n ) =estimatedcostofthecheapestpathfromnodentoagoalnod . forexampl , inethiopia , onemightestimatethecostofthecheapestpathfrommekeletoaddi ababaviaastraight-linedistancefrommekeletoaddisababa ( figure2.1 ) .heuristicfunctioni themostcommonforminwhichadditionalknowledgeisimpartedtothesearchalgorithm . greedybest-firstsearch greedybest-firstsearchtriestoexpandthenodethatisclosesttothego , onthegroundsthat thisislikelytoasolutionquickly.itevaluatesthenodesbyusingtheheuristicfunctionf ( n ) =h ( n ) . takingtheexampleofroute-findingproblemsinethiopia , thegoalistoreachaddisababa startingfromthecitymekele.weneedtoknowthestraight-linedistancestoaddisababafrom variouscitiesasshowninfigure2.1.forexampl , theinitialstateisin ( mekel ) , andthestraight linedistanceheuristichsld ( ( mekel ) ) isfoundtobe366 . usingthestraight-linedistanceheuristichsld , thegoalstatecanbereachedfaster.compiledbydawith . 20 figure2.1valuesofhsld-straightlinedistancestoaddisababacompiledbydawith . 21 figure2.2stagesingreedybest-firstsearchforaddisababausingstraight-linedistanceheurist hsld.nodesarelabeledwiththeirh-values.compiledbydawith . 22figure2.2showstheprogressofgreedybest-firstsearchusinghsldtofindapathfrommekeleto addisababa.thefirstnodetobeexpandedfrommekelewillbeweldiya , becauseitiscloserto addisababathaneitheraxumoradigrat.thenextnodetobeexpandedwillbesemera , becauseit isclosest.semerainturngeneratesaddisababa , whichisthego . propertiesofgreedysearch ocomplet ? ? no–cangetstuckinloop , e.g. , hawassa ! diredawa ! hawassa ! diredawa ! completeinfinitespacewithrepeated-statecheck otim ? ? ( bm ) , butagoodheuristiccangivedramaticimprov ospac ? ? ( bm ) —keepsallnodesinmemori ooptim ? ? greedybest-firstsearchisnotoptim , anditisincomplete.theworst-casetimeandspac complexityiso ( bm ) , wheremisthemaximumdepthofthesearchspac . a * search * searchisthemostwidelyusedformofbest-firstsearch.theevaluationfunctionf ( n ) isobtain bycombin ( 1 ) g ( n ) =thecosttoreachthenod , ( 2 ) h ( n ) =thecosttogetfromthenodetothego : f ( n ) =g ( n ) +h ( n ) . * searchisbothoptimalandcomplete.a * isoptimalifh ( n ) isanadmissibleheuristic.theobvi exampleofadmissibleheuristicisthestraight-linedistancehsld.itcannotbeanoverestimate.a * searchisoptimalifh ( n ) isanadmissibleheuristic–thati , providedthath ( n ) neveroverestim thecosttoreachthegoal.anobviousexampleofanadmissibleheuristicisthestraight-lin distancehsldthatweusedingettingtoaddisababa.theprogressofana * treesearchforaddi ababaisshowninfigure2.2.thevaluesof ‘ g ‘ arecomputedfromthestepcostsshowninth ethiopiamap ( figure2.1 ) .also , thevaluesofhsldaregiveninfigure2.1 . recursivebest-firstsearch ( rbf ) recursivebest-firstsearchisasimplerecursivealgorithmthatattemptstomimictheoperationof standardbest-firstsearch , butusingonlylinearspace.thealgorithmisshowninfigure2.4.it structureissimilartothatofrecursivedepth-firstsearch , butratherthancontinuingindefinit downthecurrentpath , itkeepstrackofthef-valueofthebestalternativepathavailablefromani ancestorofthecurrentnode.ifthecurrentnodeexceedsthislimit , therecursionunwindsbackto thealternativepath.astherecursionunwind , rbfsreplacesthef-valueofeachnodealongth pathwiththebestf-valueofitschildren.figure2.5showshowrbfsreachesaddisababa.compiledbydawith . 23 ) theinitialst b ) aftermekeleexpand c ) afterweldiyaexpandingcompiledbydawith . 24 ) afterdessieexpand f ) afterkombolchaexpand figure2.3stagesina * searchforaddisababa.nodesarelabeledwithf=g+h.theh-valuesar thestraight-linedistancestoaddisababatakenfromfigure2.1compiledbydawith . 25 functionrecursive-best-first-search ( problem ) returnasolutionorfailur returnrfb ( problem , make-nod ( initial-st [ problem ] ) , ∞ ) functionrfb ( problem , node , f_limit ) returnasolutionorfailureandanewf-cost limit ifgoal-test [ problem ] ( state [ node ] ) thenreturnnod successorsexpand ( node , problem ) ifsuccessorsisemptythenreturnfailur , ∞ foreachsinsuccessorsdo f [ ] max ( g ( ) +h ( ) , f [ node ] ) repeat bestthelowestf-valuenodeinsuccessor iff [ best ] > f_limitthenreturnfailur , f [ best ] alternativethesecondlowestf-valueamongsuccessor result , f [ best ] rbf ( problem , best , min ( f_limit , altern ) ) ifresultfailurethenreturnresult figure2.4thealgorithmforrecursivebest-firstsearchcompiledbydawith . 26 compiledbydawith . 27figure2.5stagesinanrbfssearchfortheshortestroutetoaddisababa.thef-limitvaluefor eachrecursivecallisshownontopofeachcurrentnod . ( ) thepathviadessieisfolloweduntil thecurrentbestleaf ( kombolcha ) hasavaluethatisworsethanthebestalternativepath ( semera ) . ( b ) therecursionunwindsandthebestleafvalueoftheforgottensubtre ( 417 ) isbackedupto dessi ; thensemeraisexpand , revealingabestleafvalueof450 . ( c ) therecursionunwindsandthebestleafvalueoftheforgottensubtre ( 450 ) isbackedupto semera ; thendessieisexpanded.thistimebecausethebestalternativepath ( throughadigrat ) costsatleast447 , theexpansioncontinuestoaddisababa rbfsevalu : rbfsisabitmoreefficientthanida * –stillexcessivenodegener ( mindchang ) likea * , optimalifh ( n ) isadmiss spacecomplexityiso ( bd ) . –ida * retainsonlyonesinglenumb ( thecurrentf-costlimit ) timecomplexitydifficulttocharacter –dependsonaccuracyifh ( n ) andhowoftenbestpathchang . ida * enrbfssufferfromtoolittlememori . heuristicfunct aheuristicfunctionorsimplyaheuristicisafunctionthatranksalternativesinvarioussearch algorithmsateachbranchingstepbasingonanavailableinformationinordertomakeadecis whichbranchistobefollowedduringasearch . figure2.6atypicalinstanceofthe8-puzzl . thesolutionis26stepslong . the8-puzzl the8-puzzleisanexampleofheuristicsearchproblem.theobjectofthepuzzleistoslidethetil horizontallyorverticallyintotheemptyspaceuntiltheconfigurationmatchesthego configur ( figure2.6 ) .theaveragecostforarandomlygenerated8-puzzleinstanceisabout22 steps.thebranchingfactorisabout3 . ( whentheemptytileisinthemiddl , therearefourposs move ; whenitisinthecornertherearetwo ; andwhenitisalonganedgetherearethre ) .thi meansthatanexhaustivesearchtodepth22wouldlookatabout322approximately=3.1x1010 states.bykeepingtrackofrepeatedst , wecouldcutthisdownbyafactorofabout170,000 , becausethereareonly9 ! /2=181,440distinctstatesthatarereachable.thisisamanageablecompiledbydawith . 28number , butthecorrespondingnumberforthe15-puzzleisroughly1013.ifwewanttofindth shortestsolutionsbyusinga * , weneedaheuristicfunctionthatneveroverestimatesthenumberof stepstothegoal.thetwocommonlyusedheuristicfunctionsforthe15-puzzlear : ( 1 ) h1=thenumberofmisplacedtil . forfigure2.6 , alloftheeighttilesareoutofposit , sothestartstatewouldhaveh1=8.h1isan admissibleheurist . ( 2 ) h2=thesumofthedistancesofthetilesfromtheirgoalpositions.thisiscalledthec blockdistanceormanhattandist . h2isadmiss , becauseallanymovecandoismoveonetileonestepclosertothego . tiles1to8instartstategiveamanhattandistanceof h2=3+1+2+2+2+3+3+2=18 . neitheroftheseoverestimatesthetruesolutioncost , whichis26 . theeffectivebranchingfactor onewaytocharacterizethequalityofaheuristicistheeffectivebranchingfactorb * .ifthetot numberofnodesgeneratedbya * foraparticularproblemisn , andthesolutiondepthisd , thenb * isthebranchingfactorthatauniformtreeofdepthdwouldhavetohaveinordertocontainn+1 nodes.thu , n+1=1+b * + ( b * ) 2+…+ ( b * ) forexampl , ifa * findsasolutionatdepth5using52nod , theneffectivebranchingfactoris1.92 . awell-designedheuristicwouldhaveavalueofb * closeto1 , allowingfailurelargeproblemstob solved.totesttheheuristicfunctionsh1andh2,1200randomproblemsweregeneratedwithsolut lengthsfrom2to24andsolvedthemwithiterativedeepeningsearchandwitha * searchusingboth h1andh2.figure2.7givestheaveragenumberofnodesexpandedbyeachstrategyandtheeffect branchingfactor . theresultssuggestthath2isbetterthanh1 , andisfarbetterthanusingiterativedeepeningsearch . forasolutionlengthof14 , * withh2is30,000timesmoreefficientthanuninformedit deepeningsearch . figure2.7comparisonofsearchcostsandeffectivebranchingfactorsfortheiterative- deepening-searchanda * algorithmswithh1 , andh2.dataareaverageover100instancesof the8-puzzl , forvarioussolutionlengths.compiledbydawith . 29inventingadmissibleheuristicfunct relaxedproblem oaproblemwithfewerrestrictionsontheactionsiscalledarelaxedproblem othecostofanoptimalsolutiontoarelaxedproblemisanadmissibleheuristicforth originalproblem oiftherulesofthe8-puzzlearerelaxedsothatatilecanmoveanywher , thenh1 ( n ) givesth shortestsolut oiftherulesarerelaxedsothatatilecanmovetoanyadjacentsquar , thenh2 ( n ) givesth shortestsolut lesson2:8 : localsearchalgorithmsandoptimizationproblem oinmanyoptimizationproblem , thepathtothegoalisirrelev ; thegoalstateitselfisth solut oforexampl , inthe8-queen ’ sproblem , whatmattersisthefinalconfigurationofqueen , theorderinwhichtheyaread . oinsuchcas , wecanuselocalsearchalgorithms.theyoperateusingasinglecurr state ( ratherthanmultiplepath ) andgenerallymoveonlytoneighborsofthatst . otheimportantapplicationsoftheseclassofproblemsar ( ) integrated-circuitdesign , ( b ) factory-floorlayout , ( c ) job-shopschedul , ( ) automaticprogram , ( e ) telecommunicationsnetworkoptim , ( f ) vehiclerout , ( g ) portfolio manag . keyadvantagesoflocalsearchalgorithm ( 1 ) theyuseverylittlememory–usuallyaconstantamount ; ( 2 ) theycanoftenfindreasonablesolutionsinlargeorinfinit ( continu ) statespacesforwhich systematicalgorithmsareunsuit . optimizationproblem inadditiontofindinggo , localsearchalgorithmsareusefulforsolvingpureoptim problem , inwhichtheaimistofindthebeststateaccordingtoanobjectivefunct . statespacelandscap tounderstandlocalsearch , itisbetterexplainedusingstatespacelandscapeasshowninfigur 2.8.alandscapehasboth “ locat ” ( definedbythest ) “ elev ” ( definedbythevalueof theheuristiccostfunctionorobjectivefunct ) .ifelevationcorrespondstocost , thentheaimisto findthelowestvalley–aglobalminimum ; ifelevationcorrespondstoanobjectivefunct , theaimistofindthehighestpeak–aglobalmaximum . localsearchalgorithmsexplorethislandscape.acompletelocalsearchalgorithmalwaysfindsa goalifoneexist ; anoptimalalgorithmalwaysfindsaglobalminimum/maximum.compiledbydawith . 30 figure2.8aonedimensionalstatespacelandscapeinwhichelevationcorrespondstoth objectivefunction.theaimistofindtheglobalmaximum.hillclimbingsearchmodifiesth currentstatetotrytoimproveit , asshownbythearrow.thevarioustopographicfeaturesar definedinthetext hill-climbingsearch thehill-climbingsearchalgorithmasshowninfigure2.9 , issimplyaloopthatcontinuallymov inthedirectionofincreasingvalue–thati , uphill.itterminateswhenitreachesa “ peak ” whereno neighborhasahighervalu . functionhill-climb ( problem ) returnastatethatisalocalmaximum input : problem , aproblem localvari : current , anod . neighbor , anod . currentmake-nod ( initial-st [ problem ] ) loopdo neighborahighestvaluedsuccessorofcurr ifvalu [ neighbor ] ≤valu [ current ] thenreturnst [ current ] currentneighbor figure2.9thehill-climbingsearchalgorithm ( steepestascentvers ) , whichisthemostbas localsearchtechnique.ateachstepthecurrentnodeisreplacedbythebestneighbor ; theneighbor withthehighestvalue.iftheheuristiccostestimatehisus , wecouldfindtheneighborwith thelowesth . hill-climbingissometimescalledgreedylocalsearchbecauseitgrabsagoodneighborst withoutthinkingaheadaboutwheretogonext.greedyalgorithmsoftenperformquitewel . problemswithhill-climb hill-climbingoftengetsstuckforthefollowingreason : olocalmaxima : alocalmaximumisapeakthatishigherthaneachofitsneighboringst , butlowerthantheglobalmaximum.hill-climbingalgorithmsthatreachthevicinityofacompiledbydawith . 31localmaximumwillbedrawnupwardstowardsthepeak , butwillthenbestuckwith nowhereelsetogo oridg : aridgeisshowninfigure2.10.ridgesresultsinasequenceoflocalmaximathat isverydifficultforgreedyalgorithmstonavig . oplateaux : aplateauisanareaofthestatespacelandscapewheretheevaluationfunctioni flat.itcanbeaflatlocalmaximum , fromwhichnouphillexitexist , orashould , whichitispossibletomakeprogress . figure2.10illustrationofwhyridgescausedifficultiesforhill-climbing.thegridofst ( dark circl ) issuperimposedonaridgerisingfromlefttoright , creatingasequenceoflocalmaxima thatarenotdirectlyconnectedtoeachother.fromeachlocalmaximum , alltheavailableopt pointdownhil . hill-climbingvari stochastichill-climb orandomselectionamongtheuphillmov . otheselectionprobabilitycanvarywiththesteepnessoftheuphillmov . first-choicehill-climb ocfr.stochastichillclimbingbygeneratingsuccessorsrandomlyuntilabetteronei found . random-restarthill-climb otriestoavoidgettingstuckinlocalmaxima . simulatedannealingsearch ahill-climbingalgorithmthatnevermak “ downhil ” movestowardsstateswithlowervalu ( highercost ) isguaranteedtobeincomplet , becauseitcanhavestuckonalocalmaximum.in contrast , apurelyrandomwalk–thati , movingtoasuccessorchosenuniformlyatrandomfromth setofsuccessors–iscomplet , butextremelyinefficient.simulatedannealingisanalgorithmthat combineshill-climbingwitharandomwalkinsomewaythatyieldsbothefficiencyand completeness.figure2.11showssimulatedannealingalgorithm.itisquitesimilartohillclimb . insteadofpickingthebestmov , howev , itpickstherandommove.ifthemoveimprovesth situat , itisalwaysaccepted.otherwis , thealgorithmacceptsthemovewithsomeprob lessthan1.theprobabilitydecreasesexponentiallywithth “ bad ” ofthemove–theamount ebywhichtheevaluationisworsened.simulatedannealingwasfirstusedextensivelytosolv vlsilayoutproblemsintheearly1980s.ithasbeenappliedwidelytofactoryschedulingandoth large-scaleoptimizationtasks.compiledbydawith . 32 figure2.11thesimulatedannealingsearchalgorithm , aversionofstochastichillclimbingwher somedownhillmovesareallow . geneticalgorithm ageneticalgorithm ( orga ) isavariantofstochasticbeamsearchinwhichsuccessorstatesar generatedbycombiningtwoparentst , ratherthanbymodifyingasinglestate.likebeam search , gasbeginwithasetofkrandomlygeneratedst , calledthepopulation.eachst , individu , isrepresentedasastringoverafinitealphabet–mostcommonli , astringof0sand1 . notionofnaturalselect theprocessofnaturalselectionstartswiththeselectionoffittestindividualsfromapopul . theyproduceoffspringwhichinheritthecharacteristicsoftheparentsandwillbeaddedtothenext generation.ifparentshavebetterfit , theiroffspringwillbebetterthanparentsandhaveabett chanceatsurviving.thisprocesskeepsoniteratingandattheend , agenerationwiththefittest individualswillbefound . fivephasesareconsideredinageneticalgorithm . initialpopul fitnessfunct select crossov mutat initialpopul theprocessbeginswithasetofindividualswhichiscalledapopulation.eachindividualisa solutiontotheproblemyouwanttosolve.anindividualischaracterizedbyasetofparamet ( variabl ) knownasgenes.genesarejoinedintoastringtoformachromosom ( solut ) .compiledbydawith . 33fitnessfunct thefitnessfunctiondetermineshowfitanindividuali ( theabilityofanindividualtocompetewith otherindividu ) .itgivesafitnessscoretoeachindividual.theprobabilitythatanindividualwil beselectedforreproductionisbasedonitsfitnessscor . select theideaofselectionphaseistoselectthefittestindividualsandletthempasstheirgenestoth nextgeneration.twopairsofindividu ( parent ) areselectedbasedontheirfitnessscor . individualswithhighfitnesshavemorechancetobeselectedforreproduct . crossov crossoveristhemostsignificantphaseinageneticalgorithm.foreachpairofparentstobem , acrossoverpointischosenatrandomfromwithinthegen . mutat incertainnewoffspringform , someoftheirgenescanbesubjectedtoamutationwithalow randomprobability.thisimpliesthatsomeofthebitsinthebitstringcanbeflipped.mut occurstomaintaindiversitywithinthepopulationandpreventprematureconvergence.thereisa chancethatageneofachildischangedrandomly.gener , thechanceofmutationislow ( e.g . 0.001 ) forexampl , an88-quuensstatemustspecifythepositionsof8queen , eachinacolumnof8 squar , andsorequires8xlog28=24bit . figure2.12thegeneticalgorithm.theinitialpopulationin ( ) isrankedbythefitnessfunctionin ( b ) , resultinginpairsformatingin ( c ) .theyproduceoffspringin ( ) , whicharesubjectedto mutationin ( e ) . figure2.12showsapopulationoffour8-digitstringsrepresenting8-queenstates.theproduct ofthenextgenerationofstatesisshowninfigure2.12 ( b ) ( e ) .in ( b ) eachstateisratedbyth evaluationfunctionorthefitnessfunction.in ( c ) , arandomchoiceoftwopairsisselectedfor reproduct , inaccordancewiththeprobabilitiesin ( b ) . figure2.13describesthealgorithmthatimplementsallthesesteps.compiledbydawith . 34functiongenetic_algorithm ( popul , fitness-fn ) returnanindividu input : popul , asetofindividu fitness-fn , afunctionwhichdeterminesthequalityoftheindividu repeat new_populationemptyset loopforifrom1tos ( popul ) xrandom_select ( popul , fitness_fn ) yrandom_select ( popul , fitness_fn ) childreproduc ( x , ) ( smallrandomprob ) thenchildmut ( child ) addchildtonew_popul populationnew_popul untilsomeindividualisfitenoughorenoughtimehaselaps returnthebestindividu figure2.13ageneticalgorithm.thealgorithmissameastheonediagrammedinfigure2.12 , onevari : eachmatingoftwoparentsproducesonlyoneoffspr , nottwo . lesson2:9 : adversarialsearch competitiveenviron , inwhichtheag ’ sgoalsareinconflict , giverisetoadversarialsearch problems–oftenknownasgam . game mathematicalgametheori , abranchofeconom , viewsanymultiagentenvironmentasagam providedthattheimpactofeachagentontheotheri “ signific ” , regardlessofwhethertheag arecooperativeorcompetitive.in , ai , ” game ” aredeterminist , turn-tak , two-play , zero-sum gamesofperfectinformation.thismeansdeterminist , fullyobservableenvironmentsinwhich therearetwoagentswhoseactionsmustalternateandinwhichtheutilityvaluesattheendofth gamearealwaysequalandopposite.forexampl , ifoneplayerwinsthegameofchess ( +1 ) , otherplayernecessarilylos ( -1 ) .itisthisoppositionbetweentheag ’ utilityfunctionsthat makesthesituationadversari . formaldefinitionofgam wewillconsidergameswithtwoplay , whomwewillcallmaxandmin.maxmovesfirst , andthentheytaketurnsmovinguntilthegameisover.attheendofthegam , pointsareaward tothewinningplayerandpenaltiesaregiventotheloser.agamecanbeformallydefinedasa searchproblemwiththefollowingcompon : theinitialst , whichincludestheboardpositionandidentifiestheplayertomov . asuccessorfunct , whichreturnsalistof ( move , state ) pair , eachindicatingaleg moveandtheresultingst . aterminaltest , whichdescribeswhenthegameisover.stateswherethegamehasend arecalledterminalst . autilityfunct ( alsocalledanobjectivefunctionorpayofffunct ) , whichgivea numericvaluefortheterminalstates.inchess , theoutcomeisawin , loss , ordraw , values+1 , -1 , or0.hepayoffsinbackgammonrangefrom+192to-192.compiledbydawith . 35gametre theinitialstateandlegalmovesforeachsidedefinethegametreeforthegame.figure2.18 showsthepartofthegametreefortic-tac-toe.fromtheinitialst , maxhasninepossiblemov . playalternatesbetweenmax ’ splacinganxandmin ’ splacinga0untilwereachleafnod correspondingtotheterminalstatessuchthatoneplayerhasthreeinaroworallthesquaresar filled.henumberoneachleafnodeindicatestheutilityvalueoftheterminalstatefromthepointof viewofmax ; highvaluesareassumedtobegoodformaxandbadformin.itisthemax ’ sjob tousethesearchtre ( particularlytheutilityofterminalst ) todeterminethebestmov . figure2.18apartialsearchtree.thetopnodeistheinitialst , andmaxmovefirst , placinganxinan emptysquar . optimaldecisionsingam innormalsearchproblem , theoptimalsolutionwouldbeasequenceofmoveleadingtoagoalst –aterminalstatethatisawin.inagam , ontheotherhand , minhassomethingtosayaboutit , maxthereforemustfindacontingentstrategi , whichspecifiesmax ’ smoveintheinitialst , thenmax ’ smovesinthestatesresultingfromeverypossibleresponsebymin , thenmax ’ movesinthestatesresultingfromeverypossibleresponsebyminthosemov , andsoon.an optimalstrategyleadstooutcomesatleastasgoodasanyotherstrategywhenoneisplayingan infallibleoppon . compiledbydawith . 36figure2.19atwo-plygametree.thenodesar “ maxnod ” , inwhichitisamx ’ sturnto move , andthenodesar “ minnod ” .theterminalnodesshowtheutilityvaluesformax ; theothernodesarelabeledwiththeirminimaxvalues.max ’ sbestmoveattherootisa1 , becauseit leadstothesuccessorwiththehighestminimaxvalu , andmin ’ sbestreplyisb1 , becauseitlead tothesuccessorwiththelowestminimaxvalu . figure2.20analgorithmforcalculatingminimaxdecisions.itreturnstheactioncorrespondingto thebestpossiblemov , thati , themovethatleadstotheoutcomewiththebestutil , underth assumptionthattheopponentplaystominimizeutility.thefunctionsmax-valueandmin- valuegothroughthewholegametre , allthewaytotheleav , todeterminethebacked-upvalu ofast . theminimaxalgorithm theminimaxalgorithm ( figure2.20 ) computestheminimaxdecisionfromthecurrentstate.it usesasimplerecursivecomputationoftheminimaxvaluesofeachsuccessorst , directli implementingthedefiningequations.therecursionproceedsallthewaydowntotheleavesofth tree , andthentheminimaxvaluesarebackedupthroughthetreeastherecursionunwinds.for exampl , infigure2.19 , thealgorithmfirstrecoursesdowntothethree-bottomleftnod , andus theutilityfunctiononthemtodiscoverthattheirvaluesare3,12 , and8respectively.thenittak theminimumofthesevalues,3 , andreturnsitasthebacked-upvalueofnodeb.asimilarprocess givesthebacked-upvaluesof2forcand2ford.fin , wetakethemaximumof3,2 , and2to getthebacked-upvalueof3attherootnod . theminimaxalgorithmperformsacompletedepth-firstexplorationofthegametree.ifth maximumdepthofthetre , andthereareblegalmovesateachpoint , thenthetimecomplex oftheminimaxalgorithmiso ( bm ) .thespacecomplexityiso ( bm ) foranalgorithmthatgener successorsatonc . compiledbydawith . 37alpha-betaprun theproblemwithminimaxsearchisthatthenumberofgamestatesithastoexamineisexponenti inthenumberofmoves.unfortun , wecan ’ teliminatetheexpon , butwecaneffectivelycut itinhalf.byperformingprun , wecaneliminatelargepartofthetreefromconsideration.wecan applythetechniqueknownasalphabetaprun , whenappliedtoaminimaxtre , itreturnsth samemoveasminimaxwould , butprunesawaybranchesthatcannotpossiblyinfluencethefin decis . alphabetapruninggetsitsnamefromthefollowingtwoparametersthatdescribeboundsonth backed-upvaluesthatappearanywherealongthepath : α : thevalueofthebest ( i.e. , highest-valu ) choicewehavefoundsofaratanychoicepointalong thepathofmax . β : thevalueofbest ( i.e. , lowest-valu ) choicewehavefoundsofaratanychoicepointalongth pathofmin . alphabetasearchupdatesthevaluesofαandβasitgoesalongandprunestheremainingbranch atanod ( i.e. , terminatestherecursivecal ) assoonasthevalueofthecurrentnodeisknowntob worsethanthecurrentαandβvalueformaxandmin , respectively.thecompletealgorithmi giveninfigure2.21 . theeffectivenessofalpha-betapruningishighlydependentontheorderinwhichthesuccessor areexamined.itmightbeworthwhiletotrytoexaminefirstthesuccessorsthatarelikelytobeth best.insuchcas , itturnsoutthatalpha-betaneedstoexamineonlyo ( bd/2 ) nodestopickthebest move , insteadofo ( bd ) forminimax.thismeansthattheeffectivebranchingfactorbecomessqrt ( b ) insteadofb–forchess,6insteadof35.putanotherwayalpha-betacablookaheadroughlytwicea farasminimaxinthesameamountoftim . compiledbydawith . 38figure2.21thealphabetasearchalgorithm.theseroutinesarethesameasth minimaxroutinesinfigure2.20 , exceptforthetwolinesineachofmin-valueand max-valuethatmaintainαandβ imperfect , real-timedecis theminimaxalgorithmgeneratestheentiregamesearchspac , whereasthealpha-beta algorithmallowsustoprunelargepartsofit.howev , alpha-betastillhastosearchallthewayto terminalstatesforatleastaportionofsearchspace.shannon ’ s1950paper , programminga computerforplayingchess , proposedthatprogramsshouldcutoffthesearchearlierandapplya heuristicevaluationfunctiontostatesinthesearch , effectivelyturningnonterminalnodesinto terminalleaves.thebasicideaistoalterminimaxoralpha-betaintwoway : ( 1 ) theutilityfunctionisreplacedbyaheuristicevaluationfunctionev , whichgiv anestimateoftheposit ’ sutil , ( 2 ) theterminaltestisreplacedbyacutofftestthatdecideswhentoapplyev . gamesthatincludeelementofch evaluationfunct anevaluationfunctionreturnsanestimateoftheexpectedutilityofthegamefromagivenposit , justa theheuristicfunctionreturnanestimateofthedistancetothego . gamesofimperfectinform ominimaxandalpha-betapruningrequiretoomuchleaf-nodeevalu . maybeimpracticalwithinareasonableamountoftim . oshannon ( 1950 ) : ocutoffsearchearli ( replaceterminal-testbycutoff-test ) oapplyheuristicevaluationfunctionev ( replacingutilityfunctionofalpha-beta ) cuttingoffsearch chang : –ifterminal-test ( state ) thenreturnutil ( state ) –ifcutoff-test ( state , depth ) thenreturnev ( state ) introducesafixed-depthlimitdepth –isselectedsothattheamountoftimewillnotexceedwhattherulesofthegam allow . whencutoffoccur , theevaluationisperform . heuristicevalcompiledbydawith . 39idea : produceanestimateoftheexpectedutilityofthegamefromagivenposit . performancedependsonqualityofev . requir : –evalshouldorderterminal-nodesinthesamewayasutil . –computationmaynottaketoolong . –fornon-terminalstatestheevalshouldbestronglycorrelatedwiththeactu chanceofwin . onlyusefulforquiesc ( nowildswingsinvalueinnearfutur ) state weightedlinearfunct theintroductorychessbooksgiveanapproximatematerialvalueforeachpiec : eachpawni worth1 , aknightorbishopisworth3 , arook3 , andthequeen9.thesefeaturevaluesarethenad uptoobtaintheevaluationoftheposition.mathemat , thesekindofevaluationfunctioni calledweightedlinearfunct , anditcanbeexpresseda : eval ( ) =w1f1 ( ) +w2f2 ( ) +…+wnfn ( ) •e.g. , w1=9with f1 ( ) = ( numberofwhitequeen ) – ( numberofblackqueen ) , etc . gamesthatincludech inreallif , therearemanyunpredictableexternaleventsthatputusintounforeseensitu . manygamesmirrorthisunpredictabilitybyincludingarandomel , suchasthrowingadic . backgammonisatypicalgamethatcombinesluckandskill.dicearerolledatthebeginningof player ’ sturntodeterminethelegalmoves.thebackgammonpositionoffigure2.23 , forexampl , whitehasrolleda6-5 , andhasfourpossiblemov . compiledbydawith . 40figure2-24schematicgametreeforabackgammonposit . figure2.23atypicalbackgammonposition.thegoalofthegameistomoveallon ’ spiecesoff theboard.whitemovesclockwisetoward25 , andblackmovescounterclockwisetoward0.apiec canmovetoanypositionunlesstherearemultipleopponentpiecesther ; ifthereisoneoppon , iscapturedandmuststartover.inthepositionshown , whitehasrolled6-5andmustchooseamong fourlegalmov ( 5-10,5-11 ) , ( 5-11,19-24 ) , ( 5-10,10-16 ) , ( 5-11,11-16 ) whitemovesclockwisetoward25 blackmovescounterclockwisetoward0 apiececanmovetoanypositionunlesstherearemultipleopponentpiecesther ; iftherei oneoppon , itiscapturedandmuststartov . whitehasrolled6-5andmustchooseamongfourlegalmov : ( 5-10,5-11 ) , ( 5-11,19-24 ) ( 5- 10,10-16 ) , ( 5-11,11-16 ) -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- compiledbydawith . 41 expectedminimaxvalu expected-minimax-valu ( n ) = util ( n ) ifnisatermin maxssuccessor ( n ) minimax-valu ( ) ifnisamaxnod minssuccessor ( n ) minimax-valu ( ) ifnisamaxnod ssuccessor ( n ) p ( ) . expectedminimax ( ) ifnisachancenod theseequationscanbebacked-uprecursivelyallthewaytotherootofthegam tree . lesson2:10 : avoidingrepeatedst insearch , timeiswastedbyexpandingstatesthathavealreadybeenencounteredandexpand before.forsomeproblemsrepeatedstatesareunavoidable.thesearchtreesfortheseproblemsar infinite.ifweprunesomeoftherepeatedst , wecancutthesearchtreedowntofinites . consideringsearchtreeuptoafixeddepth , eliminatingrepeatedstatesyieldsanexponenti reductioninsearchcost.repeatedst , cancauseasolvableproblemtobecomeunsolvableifth algorithmdoesnotdetectthem.repeatedstatescanbethesourceofgreatineffici : ident subtreeswillbeexploredmanytim ! aa b bb cccc c figure1.39 figure1.40compiledbydawith . 42 figure1.41thegeneralgraphsearchalgorithm.thesetclosedcanbeimplementedwithahash tabletoallowefficientcheckingforrepeatedst . donotreturntothepreviousst . •donotcreatepathswithcycl . •donotgeneratethesamestatetwic . -storestatesinahasht . -checkforrepeatedst . ousingmorememoryinordertocheckrepeatedst oalgorithmsthatforgettheirhistoryaredoomedtorepeatit . omaintainclose-listbesideopen-list ( fring ) strategiesforavoidingrepeatedst wecanmodifythegeneraltree-searchalgorithmtoincludethedatastructurecalledth closedlist , whichstoreseveryexpandednode.thefringeofunexpandednodesiscalledtheopen list.ifthecurrentnodematchesanodeontheclosedlist , itisdiscardedinsteadofbeingexpand . thenewalgorithmiscalledgraph-searchandmuchmoreefficientthantree-search.th worst-casetimeandspacerequirementsmaybemuchsmallerthano ( bd ) . searchingwithpartialinform odifferenttypesofincompletenessleadtothreedistinctproblemtyp : osensorlessproblem ( conform ) : iftheagenthasnosensorsatal ocontingencyproblem : iftheenvironmentifpartiallyobservableorifactionar uncertain ( adversari ) oexplorationproblem : whenthestatesandactionsoftheenvironmentareunknown . onosensor oinitialst ( 1,2,3,4,5,6,7,8 ) oafteract [ right ] thestat ( 2,4,6,8 ) oafteract [ suck ] thestat ( 4,8 ) oafteract [ left ] thestat ( 3,7 ) oafteract [ suck ] thestat ( 8 ) oanswer : [ right , suck , left , suck ] coercetheworldintostate7withoutanysensor obeliefst : suchstatethatagentbelieftobether ( slide7 ) partialknowledgeofstatesandact : compiledbydawith . 43–sensorlessorconformantproblem –agentmayhavenoideawher ; solut ( ifani ) isasequ . –contingencyproblem –perceptsprovidenewinformationaboutcurrentst ; solutionisatreeor polici ; ofteninterleavesearchandexecut . –ifuncertaintyiscausedbyactionsofanotherag : adversarialproblem –explorationproblem –whenstatesandactionsoftheenvironmentareunknown . lesson2:11 : constraintsatisfactionproblem ( csp ) aconstraintsatisfactionproblem ( orcsp ) isdefinedbyasetofvari , x1 , x2 .. , .xn , anda setofconstraintsc1 , c2 , … , cm.eachvariablexihasanonemptydomaind , ofpossiblevalues.each constraintciinvolvessomesubsetofvariablesandspecifiestheallowablecombinationsofvalu forthatsubset.astateoftheproblemisdefinedbyanassignmentofvaluestosomeorallofth variabl , { xi=vi , xj=vj , … } .anassignmentthatdoesnotviolateanyconstraintsiscalleda consistentorlegalassignment.acompleteassignmentisoneinwhicheveryvariablei mention , andasolutiontoacspisacompleteassignmentthatsatisfiesalltheconstraint . somecspsalsorequireasolutionthatmaximizesanobjectivefunct . exampleforconstraintsatisfactionproblem : figure2.15showsthemapofaustraliashowingeachofitsstatesandterritories.wearegiventh taskofcoloringeachregioneith , green , orblueinsuchawaythattheneighboringregion havethesamecolor.toformulatethisascsp , wedefinethevariabletobetheregion : wa , nt , q , nsw , v , sa , andt.thedomainofeachvariableistheset { red , green , blue } .theconstraint requireneighboringregionstohavedistinctcolor ; forexampl , theallowablecombinationsforwa andntarethepair { ( red , green ) , ( red , blue ) , ( green , red ) , ( green , blue ) , ( blue , red ) , ( blue , green ) } . theconstraintcanalsoberepresentedmoresuccinctlyastheinequalitywanot=nt , providedth constraintsatisfactionalgorithmhassomewaytoevaluatesuchexpress . ) therearemani possiblesolutionssucha { wa=r , nt=green , q=red , nsw=green , v=red , sa=blu , t= red } .itishelpfultovisualizeacspasaconstraintgraph , asshowninfigure2.15 ( b ) .thenodesof thegraphcorrespondtovariablesoftheproblemandthearcscorrespondtoconstraint . figure2.15 ( ) principlestatesandterritoriesofaustralia.coloringthismapcanbeviewedasa constraintsatisfactionproblem.thegoalistoassigncolorstoeachregionsothatnoneighbor regionshavethesamecolor.compiledbydawith . 44 figure2.15 ( b ) themapcoloringproblemrepresentedasaconstraintgraph . exampl : mapcolor variabl : domain : constraint : adjacentregionsmusthavedifferentcolor solutionsareassignmentssatisfyingallconstraint , e.g . : solutionsarecompleteandconsistentassign e.g. , wa=r , nt=green , q=red , nsw=green , v=red , sa=blu , t=green implicit : explicit : compiledbydawith . 45cspcanbeviewedasastandardsearchproblemasfollow : initialst : theemptyassign { } , inwhichallvariablesareunassign . successorfunct : avaluecanbeassignedtoanyunassignedvari , providedthatit doesnotconflictwithpreviouslyassignedvari . goaltest : thecurrentassignmentiscomplet . pathcost : aconstantcost ( e.g.,1 ) foreverystep . everysolutionmustbeacompleteassignmentandthereforeappearsatdepthniftherearen variabl . depthfirstsearchalgorithmsarepopularforcsp varietiesofcsp ( ) discretevari finitedomain thesimplestkindofcspinvolvesvariablesthatarediscreteandhavefinitedomains.map coloringproblemsareofthiskind.the8-queensproblemcanalsobeviewedasfinite-domaincsp , wherethevariablesq1 , q2 , .. q8arethepositionseachqueenincolumns1 , ….8andeachvari hasthedomain { 1,2,3,4,5,6,7,8 } .ifthemaximumdomainsizeofanyvariableinacspisd , thenumberofpossiblecompleteassignmentsiso ( dn ) –thati , exponentialinthenumberof variables.finitedomaincspsincludebooleancsp , whosevariablescanbeeithertrueorfals . infinitedomain discretevariablescanalsohaveinfinitedomains–forexampl , thesetofintegersorthesetof strings.withinfinitedomain , itisnolongerpossibletodescribeconstraintsbyenumeratingal allowedcombinationofvalues.insteadaconstraintlanguageofalgebraicinequalitiessucha startjob1+5 < =startjob3 . ( ii ) cspswithcontinuousdomain cspswithcontinuousdomainsareverycommoninrealworld.forexampl , inoperationresearch field , theschedulingofexperimentsonthehubbletelescoperequiresveryprecisetimingof observ ; thestartandfinishofeachobservationandmaneuverarecontinuous-valuedvari thatmustobeyavarietyofastronom , precedenceandpowerconstraints.thebest-known categoryofcontinuous-domaincspsisthatoflinearprogrammingproblem , whereth constraintsmustbelinearinequalitiesformingaconvexregion.linearprogrammingproblemscan besolvedintimepolynomialinthenumberofvariables.compiledbydawith . 46varietiesofconstraint : ( ) unaryconstraintsinvolveasinglevari . exampl : sa # green ( ii ) binaryconstraintsinvolveparisofvari . exampl : sa # wa ( iii ) higherorderconstraintsinvolve3ormorevari . exampl : cryptarithmeticpuzzl . figure2.16 ( ) cryptarithmeticproblem.eachletterstandsforadistinctdigit ; theaimistofinda substitutionofdigitsforletterssuchthattheresultingsumisarithmeticallycorrect , withthead restrictionthatnoleadingzerosareallow . ( b ) theconstrainthypergraphforthecryptarithmet problem , showintthealldiffconstraintaswellasthecolumnadditionconstraints.eachconstraintisa squareboxconnectedtothevariablesitcontain . backtrackingsearchforcsp thetermbacktrackingsearchisusedfordepth-firstsearchthatchoosesvaluesforonevariableata timeandbacktrackswhenavariablehasnolegalvalueslefttoassign.thealgorithmisshownin figure2.17 . figure2.17asimplebacktrackingalgorithmforconstraintsatisfactionproblem.thealgorithmi modeledontherecursivedepth-firstsearchcompiledbydawith . 47 figure2.17 ( b ) partofsearchtreegeneratedbysimplebacktrackingforthemapcoloringproblem . propagatinginformationthroughconstraint sofar , oursearchalgorithmconsiderstheconstraintsonavariableonlyatthetimethatthevariableischosen byselect-unassigned-variable.butbylookingatsomeoftheconstraintsearlierinthesearch , oreven beforethesearchhasstart , wecandrasticallyreducethesearchspac . forwardcheck onewaytomakebetteruseofconstraintsduringsearchiscalledforwardchecking.wheneveravariablex isassign , theforwardcheckingprocesslooksateachunassignedvariableythatisconnectedtoxbya constraintanddeletesfromi ’ sdomainanyvaluethatisinconsistentwiththevaluechosenforx.figure5.6 showstheprogressofamap-coloringsearchwithforwardcheck . constraintpropag althoughforwardcheckingdetectsmanyinconsist , itdoesnotdetectallofthem . constraintpropagationisthegeneraltermforpropagatingtheimplicationsofaconstraintononevari ontoothervari . arcconsist compiledbydawith . 48 k-consist localsearchforcsp compiledbydawith . 49thestructureofproblem problemstructur independentsubproblem tree-structuredcsp compiledbydawith . 50 figur figur conting , startin { 1,3 } . murphi ’ slaw , suckcandirtyacleancarpet . localsens : dirt , locationonli . –percept= [ l , dirti ] = { 1,3 } – [ suck ] = { 5,7 } compiledbydawith . 51– [ right ] = { 6,8 } – [ suck ] { 6 } = { 8 } ( success ) –but [ suck ] { 8 } =failur solut ? ? –belief-st : nofixedactionsequenceguaranteessolut relaxrequir : – [ suck , right , [ r , dirti ] thensuck ] –selectactionsbasedoncontingenciesarisingduringexecut . timeandspacecomplexityarealwaysconsideredwithrespecttosomemeasureoftheproblem difficulty.intheoreticalcomputersci , thetypicalmeasureisthesizeofthestatespace.inai , wherethegraphisrepresentedimplicitlybytheinitialstateandsuccessorfunct , thecomplex isexpressedintermsofthreequant : b , thebranchingfactorormaximumnumberof successorsofanynod ; , thedepthoftheshallowestgoalnod ; andm , themaximumlengthof anypathinthestatespac . search-cost-typicallydependsuponthetimecomplexitybutcanalsoincludethetermfor memoryusag . total–cost–itcombinesthesearch-costandthepathcostofthesolutionfound .